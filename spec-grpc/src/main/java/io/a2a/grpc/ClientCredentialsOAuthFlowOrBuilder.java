// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: a2a.proto
// Protobuf Java Version: 4.31.1

package io.a2a.grpc;

@com.google.protobuf.Generated
public interface ClientCredentialsOAuthFlowOrBuilder extends
    // @@protoc_insertion_point(interface_extends:a2a.v1.ClientCredentialsOAuthFlow)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The token URL to be used for this flow. This MUST be in the form of a URL.
   * The OAuth2 standard requires the use of TLS.
   * </pre>
   *
   * <code>string token_url = 1 [json_name = "tokenUrl"];</code>
   * @return The tokenUrl.
   */
  java.lang.String getTokenUrl();
  /**
   * <pre>
   * The token URL to be used for this flow. This MUST be in the form of a URL.
   * The OAuth2 standard requires the use of TLS.
   * </pre>
   *
   * <code>string token_url = 1 [json_name = "tokenUrl"];</code>
   * @return The bytes for tokenUrl.
   */
  com.google.protobuf.ByteString
      getTokenUrlBytes();

  /**
   * <pre>
   * The URL to be used for obtaining refresh tokens. This MUST be in the
   * form of a URL. The OAuth2 standard requires the use of TLS.
   * </pre>
   *
   * <code>string refresh_url = 2 [json_name = "refreshUrl"];</code>
   * @return The refreshUrl.
   */
  java.lang.String getRefreshUrl();
  /**
   * <pre>
   * The URL to be used for obtaining refresh tokens. This MUST be in the
   * form of a URL. The OAuth2 standard requires the use of TLS.
   * </pre>
   *
   * <code>string refresh_url = 2 [json_name = "refreshUrl"];</code>
   * @return The bytes for refreshUrl.
   */
  com.google.protobuf.ByteString
      getRefreshUrlBytes();

  /**
   * <pre>
   * The available scopes for the OAuth2 security scheme. A map between the
   * scope name and a short description for it. The map MAY be empty.
   * </pre>
   *
   * <code>map&lt;string, string&gt; scopes = 3 [json_name = "scopes"];</code>
   */
  int getScopesCount();
  /**
   * <pre>
   * The available scopes for the OAuth2 security scheme. A map between the
   * scope name and a short description for it. The map MAY be empty.
   * </pre>
   *
   * <code>map&lt;string, string&gt; scopes = 3 [json_name = "scopes"];</code>
   */
  boolean containsScopes(
      java.lang.String key);
  /**
   * Use {@link #getScopesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getScopes();
  /**
   * <pre>
   * The available scopes for the OAuth2 security scheme. A map between the
   * scope name and a short description for it. The map MAY be empty.
   * </pre>
   *
   * <code>map&lt;string, string&gt; scopes = 3 [json_name = "scopes"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getScopesMap();
  /**
   * <pre>
   * The available scopes for the OAuth2 security scheme. A map between the
   * scope name and a short description for it. The map MAY be empty.
   * </pre>
   *
   * <code>map&lt;string, string&gt; scopes = 3 [json_name = "scopes"];</code>
   */
  /* nullable */
java.lang.String getScopesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * The available scopes for the OAuth2 security scheme. A map between the
   * scope name and a short description for it. The map MAY be empty.
   * </pre>
   *
   * <code>map&lt;string, string&gt; scopes = 3 [json_name = "scopes"];</code>
   */
  java.lang.String getScopesOrThrow(
      java.lang.String key);
}
