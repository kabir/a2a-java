// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: a2a.proto
// Protobuf Java Version: 4.31.1

package io.a2a.grpc;

/**
 * <pre>
 * The set of states a Task can be in.
 * </pre>
 *
 * Protobuf enum {@code a2a.v1.TaskState}
 */
@com.google.protobuf.Generated
public enum TaskState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>TASK_STATE_UNSPECIFIED = 0;</code>
   */
  TASK_STATE_UNSPECIFIED(0),
  /**
   * <pre>
   * Represents the status that acknowledges a task is created
   * </pre>
   *
   * <code>TASK_STATE_SUBMITTED = 1;</code>
   */
  TASK_STATE_SUBMITTED(1),
  /**
   * <pre>
   * Represents the status that a task is actively being processed
   * </pre>
   *
   * <code>TASK_STATE_WORKING = 2;</code>
   */
  TASK_STATE_WORKING(2),
  /**
   * <pre>
   * Represents the status a task is finished. This is a terminal state
   * </pre>
   *
   * <code>TASK_STATE_COMPLETED = 3;</code>
   */
  TASK_STATE_COMPLETED(3),
  /**
   * <pre>
   * Represents the status a task is done but failed. This is a terminal state
   * </pre>
   *
   * <code>TASK_STATE_FAILED = 4;</code>
   */
  TASK_STATE_FAILED(4),
  /**
   * <pre>
   * Represents the status a task was cancelled before it finished.
   * This is a terminal state.
   * </pre>
   *
   * <code>TASK_STATE_CANCELLED = 5;</code>
   */
  TASK_STATE_CANCELLED(5),
  /**
   * <pre>
   * Represents the status that the task requires information to complete.
   * This is an interrupted state.
   * </pre>
   *
   * <code>TASK_STATE_INPUT_REQUIRED = 6;</code>
   */
  TASK_STATE_INPUT_REQUIRED(6),
  /**
   * <pre>
   * Represents the status that the agent has decided to not perform the task.
   * This may be done during initial task creation or later once an agent
   * has determined it can't or won't proceed. This is a terminal state.
   * </pre>
   *
   * <code>TASK_STATE_REJECTED = 7;</code>
   */
  TASK_STATE_REJECTED(7),
  /**
   * <pre>
   * Represents the state that some authentication is needed from the upstream
   * client. Authentication is expected to come out-of-band thus this is not
   * an interrupted or terminal state.
   * </pre>
   *
   * <code>TASK_STATE_AUTH_REQUIRED = 8;</code>
   */
  TASK_STATE_AUTH_REQUIRED(8),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 31,
      /* patch= */ 1,
      /* suffix= */ "",
      TaskState.class.getName());
  }
  /**
   * <code>TASK_STATE_UNSPECIFIED = 0;</code>
   */
  public static final int TASK_STATE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Represents the status that acknowledges a task is created
   * </pre>
   *
   * <code>TASK_STATE_SUBMITTED = 1;</code>
   */
  public static final int TASK_STATE_SUBMITTED_VALUE = 1;
  /**
   * <pre>
   * Represents the status that a task is actively being processed
   * </pre>
   *
   * <code>TASK_STATE_WORKING = 2;</code>
   */
  public static final int TASK_STATE_WORKING_VALUE = 2;
  /**
   * <pre>
   * Represents the status a task is finished. This is a terminal state
   * </pre>
   *
   * <code>TASK_STATE_COMPLETED = 3;</code>
   */
  public static final int TASK_STATE_COMPLETED_VALUE = 3;
  /**
   * <pre>
   * Represents the status a task is done but failed. This is a terminal state
   * </pre>
   *
   * <code>TASK_STATE_FAILED = 4;</code>
   */
  public static final int TASK_STATE_FAILED_VALUE = 4;
  /**
   * <pre>
   * Represents the status a task was cancelled before it finished.
   * This is a terminal state.
   * </pre>
   *
   * <code>TASK_STATE_CANCELLED = 5;</code>
   */
  public static final int TASK_STATE_CANCELLED_VALUE = 5;
  /**
   * <pre>
   * Represents the status that the task requires information to complete.
   * This is an interrupted state.
   * </pre>
   *
   * <code>TASK_STATE_INPUT_REQUIRED = 6;</code>
   */
  public static final int TASK_STATE_INPUT_REQUIRED_VALUE = 6;
  /**
   * <pre>
   * Represents the status that the agent has decided to not perform the task.
   * This may be done during initial task creation or later once an agent
   * has determined it can't or won't proceed. This is a terminal state.
   * </pre>
   *
   * <code>TASK_STATE_REJECTED = 7;</code>
   */
  public static final int TASK_STATE_REJECTED_VALUE = 7;
  /**
   * <pre>
   * Represents the state that some authentication is needed from the upstream
   * client. Authentication is expected to come out-of-band thus this is not
   * an interrupted or terminal state.
   * </pre>
   *
   * <code>TASK_STATE_AUTH_REQUIRED = 8;</code>
   */
  public static final int TASK_STATE_AUTH_REQUIRED_VALUE = 8;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TaskState valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TaskState forNumber(int value) {
    switch (value) {
      case 0: return TASK_STATE_UNSPECIFIED;
      case 1: return TASK_STATE_SUBMITTED;
      case 2: return TASK_STATE_WORKING;
      case 3: return TASK_STATE_COMPLETED;
      case 4: return TASK_STATE_FAILED;
      case 5: return TASK_STATE_CANCELLED;
      case 6: return TASK_STATE_INPUT_REQUIRED;
      case 7: return TASK_STATE_REJECTED;
      case 8: return TASK_STATE_AUTH_REQUIRED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TaskState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TaskState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TaskState>() {
          public TaskState findValueByNumber(int number) {
            return TaskState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.a2a.grpc.A2A.getDescriptor().getEnumTypes().get(0);
  }

  private static final TaskState[] VALUES = values();

  public static TaskState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TaskState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:a2a.v1.TaskState)
}

